#!/usr/bin/env python3

# Python script that monitors the battery status and sends notifications when the
# battery's capacity reaches a critical level.
# It reads the battery status and capacity from system files and then prints a pretty-formatted
# status message for the battery.
# It's for use in minimalist windows managers bars (e.g. dwm, qtile).

from __future__ import annotations

import argparse
import os
import subprocess
import sys
from dataclasses import dataclass
from enum import Enum, auto
from typing import ClassVar


def read_line(file: str) -> str:
    try:
        with open(file) as f:
            return f.readline().strip()
    except FileNotFoundError as err:
        msg = f'{file=} not found.'
        raise FileNotFoundError(msg) from err


class BatStatus(Enum):
    Charging = auto()
    Discharging = auto()
    Full = auto()
    Unknown = auto()


IconsMap = list[tuple[int, int, str]]
ICONS_DISCHARGING: IconsMap = [
    (1, 10, ''),
    (11, 20, ''),
    (21, 30, ''),
    (31, 40, ''),
    (41, 50, ''),
    (51, 60, ''),
    (61, 70, ''),
    (71, 80, ''),
    (81, 90, ''),
    (91, 94, ''),
    (95, 100, ''),
]
ICONS_CHARGING: IconsMap = [
    (1, 14, ''),
    (15, 29, ''),
    (30, 44, ''),
    (45, 59, ''),
    (60, 74, ''),
    (75, 89, ''),
    (90, 100, ''),
]
ICONS_UNKNOWN: IconsMap = [(1, 100, '')]
ICONS_FULL: IconsMap = [(1, 100, '')]
ICONS_MAPS: dict[BatStatus, IconsMap] = {
    BatStatus.Charging: ICONS_CHARGING,
    BatStatus.Discharging: ICONS_DISCHARGING,
    BatStatus.Full: ICONS_FULL,
}


class Icons:
    @staticmethod
    def get_icon_map(status: BatStatus) -> IconsMap:
        return ICONS_MAPS.get(status, ICONS_UNKNOWN)

    @staticmethod
    def get_icon_for_capacity(status: BatStatus, capacity: int) -> str:
        for range_start, range_end, icon in Icons.get_icon_map(status):
            if range_start <= capacity <= range_end:
                return icon
        return ICONS_UNKNOWN[0][2]


class System:
    battery_name: str = os.environ.get('BATTERY', 'BAT0')
    battery_crit_cap_icon: str = 'battery-level-10-symbolic'
    power_supply_status: str = f'/sys/class/power_supply/{battery_name}/status'
    power_supply_capacity: str = f'/sys/class/power_supply/{battery_name}/capacity'

    @staticmethod
    def run(args: list[str]) -> int:
        try:
            completed_process = subprocess.run(
                args,  # noqa: S603
                stdout=subprocess.PIPE,
                stdin=subprocess.PIPE,
                text=True,
                check=True,
            )
            return completed_process.returncode
        except subprocess.SubprocessError as e:
            raise e

    @staticmethod
    def send_notification(
        title: str,
        body: str,
        icon: str,
        bin: str,
        urgency: str = 'normal',
    ) -> None:
        args = [
            bin,
            '--app-name=Battery',
            f'--icon={icon}',
            f'--urgency={urgency}',
            title,
            body,
        ]
        System.run(args)


@dataclass
class Battery:
    status: str
    current_capacity: int
    critial_capacity: int

    STATUS: ClassVar[dict[str, BatStatus]] = {
        'Charging': BatStatus.Charging,
        'Discharging': BatStatus.Discharging,
        'Full': BatStatus.Full,
        'Unknown': BatStatus.Unknown,
    }

    @property
    def current_status(self) -> BatStatus:
        return self.STATUS.get(self.status, BatStatus.Unknown)

    @classmethod
    def get_battery(cls) -> Battery:
        critical_capacity = 10
        bat_status = read_line(System.power_supply_status)
        bat_capacity = int(read_line(System.power_supply_capacity))
        return cls(bat_status, bat_capacity, critical_capacity)

    def check_battery_status(self) -> None:
        if self.current_capacity <= self.critial_capacity:
            System.send_notification(
                title='Battery',
                body=f'Capacity critical: {self.current_capacity}%',
                icon=System.battery_crit_cap_icon,
                bin='notify-send',
                urgency='critical',
            )

    def print_pretty_status(self, left_sep: str = ' ', right_sep: str = ' ') -> None:
        icon = Icons.get_icon_for_capacity(self.current_status, self.current_capacity)
        print(f'{left_sep}{icon} {self.current_capacity}% {self.status}{right_sep}')


def main() -> int:
    left_sep = os.environ.get('SEP1', '')
    right_sep = os.environ.get('SEP2', '')

    parser = argparse.ArgumentParser()
    parser.add_argument('--no-sep', action='store_true')
    args = parser.parse_args()

    battery = Battery.get_battery()
    battery.check_battery_status()

    if args.no_sep:
        left_sep = ''
        right_sep = ''

    battery.print_pretty_status(left_sep, right_sep)
    return 0


if __name__ == '__main__':
    sys.exit(main())
