#!/usr/bin/env python3

# Python script that monitors the battery status and sends notifications when the
# battery's capacity reaches a critical level.
# It reads the battery status and capacity from system files and then prints a pretty-formatted
# status message for the battery.
# It's for use in minimalist windows managers bars (e.g. dwm, qtile).

from __future__ import annotations

import argparse
import os
import subprocess
import sys
from dataclasses import dataclass
from enum import Enum, auto
from pathlib import Path
from typing import ClassVar

POWER_SUPPLY_STATUS = '/sys/class/power_supply/{}/status'
POWER_SUPPLY_CAPACITY = '/sys/class/power_supply/{}/capacity'
PROGRAM_NAME = Path(__file__).name

USAGE = f"""\
usage: {PROGRAM_NAME} [--name NAME] [--no-sep] [--no-icon] [--no-status] [--health] [--no-health-icon] [-h]

Simple script that monitors the battery status

options:
    --name              Battery name (default=BAT0)
    --no-sep            No separator between battery status and capacity
    --no-icon           No battery icon
    --no-status         No battery status
    --health            Show battery health
    --no-health-icon    No health icon
    -h, --help          Show this help message
"""


def read_line(file: str) -> str:
    try:
        with open(file) as f:
            return f.readline().strip()
    except FileNotFoundError as err:
        msg = f'{file=} not found.'
        raise FileNotFoundError(msg) from err


class BatStatus(Enum):
    Charging = auto()
    Discharging = auto()
    Full = auto()
    Unknown = auto()


IconsMap = list[tuple[int, int, str]]
ICONS_DISCHARGING: IconsMap = [
    (1, 10, ''),
    (11, 20, ''),
    (21, 30, ''),
    (31, 40, ''),
    (41, 50, ''),
    (51, 60, ''),
    (61, 70, ''),
    (71, 80, ''),
    (81, 90, ''),
    (91, 94, ''),
    (95, 100, ''),
]
ICONS_CHARGING: IconsMap = [
    (1, 14, ''),
    (15, 29, ''),
    (30, 44, ''),
    (45, 59, ''),
    (60, 74, ''),
    (75, 89, ''),
    (90, 100, ''),
]
ICONS_UNKNOWN: IconsMap = [(1, 100, '')]
ICONS_FULL: IconsMap = [(1, 100, '')]
ICONS_HEALTH: IconsMap = [(1, 100, '')]
ICONS_MAPS: dict[BatStatus, IconsMap] = {
    BatStatus.Charging: ICONS_CHARGING,
    BatStatus.Discharging: ICONS_DISCHARGING,
    BatStatus.Full: ICONS_FULL,
}


class Icons:
    @staticmethod
    def get_icon_map(status: BatStatus) -> IconsMap:
        return ICONS_MAPS.get(status, ICONS_UNKNOWN)

    @staticmethod
    def get_icon_for_capacity(status: BatStatus, capacity: int) -> str:
        for range_start, range_end, icon in Icons.get_icon_map(status):
            if range_start <= capacity <= range_end:
                return icon
        return ICONS_UNKNOWN[0][2]


class System:
    @staticmethod
    def run(args: list[str]) -> int:
        try:
            completed_process = subprocess.run(
                args,  # noqa: S603
                stdout=subprocess.PIPE,
                stdin=subprocess.PIPE,
                text=True,
                check=True,
            )
            return completed_process.returncode
        except subprocess.SubprocessError as e:
            raise e

    @staticmethod
    def send_notification(
        title: str,
        body: str,
        icon: str,
        bin: str,
        urgency: str = 'normal',
    ) -> None:
        args = [
            bin,
            '--app-name=Battery',
            f'--icon={icon}',
            f'--urgency={urgency}',
            title,
            body,
        ]
        System.run(args)


@dataclass
class Battery:
    name: str
    critical_capacity: int = 10
    critical_capacity_icon: str = 'battery-level-10-symbolic'

    STATUS: ClassVar[dict[str, BatStatus]] = {
        'Charging': BatStatus.Charging,
        'Discharging': BatStatus.Discharging,
        'Full': BatStatus.Full,
        'Unknown': BatStatus.Unknown,
    }

    @property
    def current_status(self) -> BatStatus:
        return self.STATUS.get(self.status, BatStatus.Unknown)

    @property
    def health(self) -> int:
        return int(3677000 / 3677000 * 100)

    @property
    def status(self) -> str:
        return read_line(POWER_SUPPLY_STATUS.format(self.name))

    @property
    def capacity(self) -> int:
        return int(read_line(POWER_SUPPLY_CAPACITY.format(self.name)))

    def check_battery_status(self) -> None:
        if self.capacity <= self.critical_capacity:
            System.send_notification(
                title='Battery',
                body=f'Capacity critical: {self.capacity}%',
                icon=self.critical_capacity_icon,
                bin='notify-send',
                urgency='critical',
            )


def get_separators(args: argparse.Namespace) -> tuple[str, str]:
    if args.no_sep:
        return '', ''
    return os.environ.get('SEP1', ''), os.environ.get('SEP2', '')


def get_health_string(args, battery):
    if args.health:
        health_icon = '' if args.no_health_icon else f' {ICONS_HEALTH[0][2]}'
        return f'{health_icon} {battery.health}%'
    return ''


def setup_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        add_help=False,
    )
    parser.add_argument('--name', default='BAT0')
    parser.add_argument('--no-sep', action='store_true')
    parser.add_argument('--no-icon', action='store_true')
    parser.add_argument('--no-status', action='store_true')
    parser.add_argument('--health', action='store_true')
    parser.add_argument('--no-health-icon', action='store_true')
    parser.add_argument('-h', '--help', action='store_true')
    return parser.parse_args()


def main() -> int:
    args = setup_args()

    if args.help:
        print(USAGE)
        return 0

    battery = Battery(name=args.name)
    battery.check_battery_status()

    left_sep, right_sep = get_separators(args)
    icon = '' if args.no_icon else f'{Icons.get_icon_for_capacity(battery.current_status, battery.capacity)} '
    current_status = '' if args.no_status else f' {battery.status}'
    health = get_health_string(args, battery)

    print(f'{left_sep}{icon}{battery.capacity}%{current_status}{health}{right_sep}')
    return 0


if __name__ == '__main__':
    sys.exit(main())
